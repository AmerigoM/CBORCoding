#if !canImport(ObjectiveC)
import XCTest

extension CBORDecoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CBORDecoderTests = [
        ("testAppendixAComplexExamples1", testAppendixAComplexExamples1),
        ("testAppendixAComplexExamples10", testAppendixAComplexExamples10),
        ("testAppendixAComplexExamples2", testAppendixAComplexExamples2),
        ("testAppendixAComplexExamples3", testAppendixAComplexExamples3),
        ("testAppendixAComplexExamples4", testAppendixAComplexExamples4),
        ("testAppendixAComplexExamples5", testAppendixAComplexExamples5),
        ("testAppendixAComplexExamples6", testAppendixAComplexExamples6),
        ("testAppendixAComplexExamples7", testAppendixAComplexExamples7),
        ("testAppendixAComplexExamples8", testAppendixAComplexExamples8),
        ("testAppendixAComplexExamples9", testAppendixAComplexExamples9),
        ("testAppendixASimpleExamples", testAppendixASimpleExamples),
        ("testDecodeDecimalFractionsAndBigfloats", testDecodeDecimalFractionsAndBigfloats),
        ("testDecodeIntKeyedValues", testDecodeIntKeyedValues),
        ("testDecodeKeyedValuesFailureCases", testDecodeKeyedValuesFailureCases),
        ("testDecodeNestedUnkeyedContainers", testDecodeNestedUnkeyedContainers),
        ("testDecoderUserInfo", testDecoderUserInfo),
        ("testDecodeSingleValueFailureCases", testDecodeSingleValueFailureCases),
        ("testDecodeSingleValues", testDecodeSingleValues),
        ("testDecodeStringKeyedValues", testDecodeStringKeyedValues),
        ("testDecodeUnkeyedValues", testDecodeUnkeyedValues),
        ("testDecodeUnkeyedValuesFailureCases1", testDecodeUnkeyedValuesFailureCases1),
        ("testDecodeUnkeyedValuesFailureCases2", testDecodeUnkeyedValuesFailureCases2),
        ("testFailureCases", testFailureCases),
        ("testSuperDecoder1", testSuperDecoder1),
        ("testSuperDecoder2", testSuperDecoder2),
        ("testSuperDecoder3", testSuperDecoder3),
        ("testSuperDecoder4", testSuperDecoder4),
    ]
}

extension CBOREncoderTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CBOREncoderTests = [
        ("testAppendixAComplexExamples1", testAppendixAComplexExamples1),
        ("testAppendixAComplexExamples10", testAppendixAComplexExamples10),
        ("testAppendixAComplexExamples11", testAppendixAComplexExamples11),
        ("testAppendixAComplexExamples12", testAppendixAComplexExamples12),
        ("testAppendixAComplexExamples13", testAppendixAComplexExamples13),
        ("testAppendixAComplexExamples14", testAppendixAComplexExamples14),
        ("testAppendixAComplexExamples15", testAppendixAComplexExamples15),
        ("testAppendixAComplexExamples16", testAppendixAComplexExamples16),
        ("testAppendixAComplexExamples17", testAppendixAComplexExamples17),
        ("testAppendixAComplexExamples18", testAppendixAComplexExamples18),
        ("testAppendixAComplexExamples19", testAppendixAComplexExamples19),
        ("testAppendixAComplexExamples2", testAppendixAComplexExamples2),
        ("testAppendixAComplexExamples20", testAppendixAComplexExamples20),
        ("testAppendixAComplexExamples3", testAppendixAComplexExamples3),
        ("testAppendixAComplexExamples4", testAppendixAComplexExamples4),
        ("testAppendixAComplexExamples5", testAppendixAComplexExamples5),
        ("testAppendixAComplexExamples6", testAppendixAComplexExamples6),
        ("testAppendixAComplexExamples7", testAppendixAComplexExamples7),
        ("testAppendixAComplexExamples8", testAppendixAComplexExamples8),
        ("testAppendixAComplexExamples9", testAppendixAComplexExamples9),
        ("testAppendixASimpleExamples", testAppendixASimpleExamples),
        ("testDuplicateContainers1", testDuplicateContainers1),
        ("testDuplicateContainers2", testDuplicateContainers2),
        ("testEncodeEmptyDataTypes", testEncodeEmptyDataTypes),
        ("testEncodePrimitiveTypes1", testEncodePrimitiveTypes1),
        ("testEncodePrimitiveTypes2", testEncodePrimitiveTypes2),
        ("testEncodePrimitiveTypes3", testEncodePrimitiveTypes3),
        ("testEncodePrimitiveTypes4", testEncodePrimitiveTypes4),
        ("testEncoderUserInfo", testEncoderUserInfo),
        ("testFailureCases", testFailureCases),
        ("testSelfDescribedCBOR", testSelfDescribedCBOR),
        ("testSuperEncoder1", testSuperEncoder1),
        ("testSuperEncoder2", testSuperEncoder2),
        ("testSuperEncoder3", testSuperEncoder3),
        ("testTaggedValues", testTaggedValues),
        ("testTaggedValuesFailureCases", testTaggedValuesFailureCases),
    ]
}

extension CBORParserTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CBORParserTests = [
        ("testAppendixAComplexExamples1", testAppendixAComplexExamples1),
        ("testAppendixAComplexExamples10", testAppendixAComplexExamples10),
        ("testAppendixAComplexExamples2", testAppendixAComplexExamples2),
        ("testAppendixAComplexExamples3", testAppendixAComplexExamples3),
        ("testAppendixAComplexExamples4", testAppendixAComplexExamples4),
        ("testAppendixAComplexExamples5", testAppendixAComplexExamples5),
        ("testAppendixAComplexExamples6", testAppendixAComplexExamples6),
        ("testAppendixAComplexExamples7", testAppendixAComplexExamples7),
        ("testAppendixAComplexExamples8", testAppendixAComplexExamples8),
        ("testAppendixAComplexExamples9", testAppendixAComplexExamples9),
        ("testAppendixASimpleExamples", testAppendixASimpleExamples),
        ("testCreateCodingKeys", testCreateCodingKeys),
        ("testDecodeMapCodingKeys", testDecodeMapCodingKeys),
        ("testDirectDecoding", testDirectDecoding),
        ("testFailureCases", testFailureCases),
        ("testTaggedValues", testTaggedValues),
        ("testTypeParsing", testTypeParsing),
    ]
}

extension CBORTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__CBORTests = [
        ("testCBOREncoded", testCBOREncoded),
        ("testDecodeBigfloatWithOtherEncoder", testDecodeBigfloatWithOtherEncoder),
        ("testDecodeBignumWithOtherEncoder", testDecodeBignumWithOtherEncoder),
        ("testDecodeDecimalFractionWithOtherEncoder", testDecodeDecimalFractionWithOtherEncoder),
        ("testDecodeIndefiniteLengthDataWithOtherEncoder", testDecodeIndefiniteLengthDataWithOtherEncoder),
        ("testDecodeIndefiniteLengthStringWithOtherEncoder", testDecodeIndefiniteLengthStringWithOtherEncoder),
        ("testDecodeNegativeUInt64WithOtherEncoder", testDecodeNegativeUInt64WithOtherEncoder),
        ("testDecodeSimpleValueWithOtherEncoder", testDecodeSimpleValueWithOtherEncoder),
        ("testDirectlyDecodeBignum", testDirectlyDecodeBignum),
        ("testDirectlyDecodeIndefiniteLengthArray", testDirectlyDecodeIndefiniteLengthArray),
        ("testDirectlyDecodeIndefiniteLengthData", testDirectlyDecodeIndefiniteLengthData),
        ("testDirectlyDecodeIndefiniteLengthMap", testDirectlyDecodeIndefiniteLengthMap),
        ("testDirectlyDecodeIndefiniteLengthString", testDirectlyDecodeIndefiniteLengthString),
        ("testDirectlyDecodeNegativeUInt64", testDirectlyDecodeNegativeUInt64),
        ("testDirectlyDecodeSimpleValue", testDirectlyDecodeSimpleValue),
        ("testDirectlyDecodeUndefined", testDirectlyDecodeUndefined),
        ("testDirectlyEncodeCBOREncoded", testDirectlyEncodeCBOREncoded),
        ("testDirectlyEncodeIndefiniteLengthData", testDirectlyEncodeIndefiniteLengthData),
        ("testDirectlyEncodeIndefiniteLengthString", testDirectlyEncodeIndefiniteLengthString),
        ("testDirectlyEncodeNegativeUInt64", testDirectlyEncodeNegativeUInt64),
        ("testDirectlyEncodeUndefined", testDirectlyEncodeUndefined),
        ("testEncodeBigfloatWithOtherEncoder", testEncodeBigfloatWithOtherEncoder),
        ("testEncodeBignumWithOtherEncoder", testEncodeBignumWithOtherEncoder),
        ("testEncodeCBOREncodedWithOtherEncoder", testEncodeCBOREncodedWithOtherEncoder),
        ("testEncodeDecimalFractionWithOtherEncoder", testEncodeDecimalFractionWithOtherEncoder),
        ("testEncodeIndefiniteLengthArrayWithOtherEncoder", testEncodeIndefiniteLengthArrayWithOtherEncoder),
        ("testEncodeIndefiniteLengthDataWithOtherEncoder", testEncodeIndefiniteLengthDataWithOtherEncoder),
        ("testEncodeIndefiniteLengthMapWithOtherEncoder", testEncodeIndefiniteLengthMapWithOtherEncoder),
        ("testEncodeIndefiniteLengthStringWithOtherEncoder", testEncodeIndefiniteLengthStringWithOtherEncoder),
        ("testEncodeNegativeUInt64WithOtherEncoder", testEncodeNegativeUInt64WithOtherEncoder),
        ("testEncodeSimpleValueWithOtherEncoder", testEncodeSimpleValueWithOtherEncoder),
        ("testEncodeUndefinedWithOtherEncoder", testEncodeUndefinedWithOtherEncoder),
        ("testIndefiniteLengthDataInitialization", testIndefiniteLengthDataInitialization),
        ("testIndefiniteLengthStringInitialization", testIndefiniteLengthStringInitialization),
        ("testTagInitialization", testTagInitialization),
        ("testTagValues", testTagValues),
    ]
}

extension ContainersTests {
    // DO NOT MODIFY: This is autogenerated, use:
    //   `swift test --generate-linuxmain`
    // to regenerate.
    static let __allTests__ContainersTests = [
        ("testArrayWrapperImplementedProtocolRequirements", testArrayWrapperImplementedProtocolRequirements),
        ("testArrayWrapperInitialization", testArrayWrapperInitialization),
        ("testCodingKeyDictionaryImplementedProtocolRequirements", testCodingKeyDictionaryImplementedProtocolRequirements),
        ("testCodingKeyDictionaryInitialization", testCodingKeyDictionaryInitialization),
    ]
}

public func __allTests() -> [XCTestCaseEntry] {
    return [
        testCase(CBORDecoderTests.__allTests__CBORDecoderTests),
        testCase(CBOREncoderTests.__allTests__CBOREncoderTests),
        testCase(CBORParserTests.__allTests__CBORParserTests),
        testCase(CBORTests.__allTests__CBORTests),
        testCase(ContainersTests.__allTests__ContainersTests),
    ]
}
#endif
